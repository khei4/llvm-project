; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=aggressive-instcombine -S -data-layout="e" | FileCheck %s --check-prefixes=CHECK,LE
; RUN: opt < %s -passes=aggressive-instcombine -S -data-layout="E" | FileCheck %s --check-prefixes=CHECK,BE

@constarray = internal constant [8 x i8]  c"\01\00\01\00\01\00\01\00", align 4
@constpackedstruct = internal constant <{[8 x i8]}>  <{[8 x i8] c"\01\00\01\00\01\00\01\00"}>, align 4

define i8 @gep_load_i8_align2(i64 %idx){
; CHECK-LABEL: @gep_load_i8_align2(
; CHECK-NEXT:    ret i8 1
;
  %1 = getelementptr inbounds i8, ptr @constarray, i64 %idx
  %2 = load i8, ptr %1, align 2
  ret i8 %2
}

; can't be folded
define i8 @gep_load_i8_align1(i64 %idx){
; CHECK-LABEL: @gep_load_i8_align1(
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds i8, ptr @constarray, i64 [[IDX:%.*]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr [[TMP1]], align 1
; CHECK-NEXT:    ret i8 [[TMP2]]
;
  %1 = getelementptr inbounds i8, ptr @constarray, i64 %idx
  %2 = load i8, ptr %1, align 1
  ret i8 %2
}

define i32 @gep_i32_load_i32_align4(i64 %idx){
; LE-LABEL: @gep_i32_load_i32_align4(
; LE-NEXT:    ret i32 65537
;
; BE-LABEL: @gep_i32_load_i32_align4(
; BE-NEXT:    ret i32 16777472
;
  %1 = getelementptr inbounds i32, ptr @constarray, i64 %idx
  %2 = load i32, ptr %1, align 4
  ret i32 %2
}

define i32 @gep_i32_load_i32_align4_packedstruct(i64 %idx){
; LE-LABEL: @gep_i32_load_i32_align4_packedstruct(
; LE-NEXT:    ret i32 65537
;
; BE-LABEL: @gep_i32_load_i32_align4_packedstruct(
; BE-NEXT:    ret i32 16777472
;
  %1 = getelementptr inbounds i32, ptr @constpackedstruct, i64 %idx
  %2 = load i32, ptr %1, align 4
  ret i32 %2
}

; can't be folded
define i32 @gep_i8_load_i32_align1(i64 %idx){
; CHECK-LABEL: @gep_i8_load_i32_align1(
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds i8, ptr @constarray, i64 [[IDX:%.*]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[TMP1]], align 1
; CHECK-NEXT:    ret i32 [[TMP2]]
;
  %1 = getelementptr inbounds i8, ptr @constarray, i64 %idx
  %2 = load i32, ptr %1, align 1
  ret i32 %2
}

; can't be folded
define i32 @gep_i8_load_i32_align1_packedstruct(i64 %idx){
; CHECK-LABEL: @gep_i8_load_i32_align1_packedstruct(
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds i8, ptr @constpackedstruct, i64 [[IDX:%.*]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[TMP1]], align 1
; CHECK-NEXT:    ret i32 [[TMP2]]
;
  %1 = getelementptr inbounds i8, ptr @constpackedstruct, i64 %idx
  %2 = load i32, ptr %1, align 1
  ret i32 %2
}

define i32 @gep_i16_load_i32_align1(i64 %idx){
; LE-LABEL: @gep_i16_load_i32_align1(
; LE-NEXT:    ret i32 65537
;
; BE-LABEL: @gep_i16_load_i32_align1(
; BE-NEXT:    ret i32 16777472
;
  %1 = getelementptr inbounds i16, ptr @constarray, i64 %idx
  %2 = load i32, ptr %1, align 1
  ret i32 %2
}
